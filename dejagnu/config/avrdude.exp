# Copyright (C) 2014 Embecosm Limited.

# Contributor Pierre Langlois <pierre.langlois@embecosm.com>

# This file is a configuration file for loading a program with AVRDUDE.

# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.

# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.

load_generic_config "energytool"

proc avrdude_spawn { dest cmdline args } {
    if {[board_info $dest exists avrdude]} {
	set avrdude [board_info $dest avrdude]
    } else {
	perror "no avrdude defined for [board_info $dest name]"
	exit 1
    }

    if {[board_info $dest exists avrdude,config_file]} {
	set avrdude_config "-C [board_info $dest avrdude,config_file]"
    } else {
        set avrdude_config ""
    }

    if {[board_info $dest exists avrdude,programmer]} {
	set avrdude_programmer "-c[board_info $dest avrdude,programmer]"
    } else {
	perror "no avrdude programmer defined for [board_info $dest name]"
	exit 1
    }

    if {[board_info $dest exists avrdude,part]} {
	set avrdude_part "-p[board_info $dest avrdude,part]"
    } else {
	perror "no avrdude part defined for [board_info $dest name]"
	exit 1
    }

    if {[board_info $dest exists avrdude,port]} {
	set avrdude_port "-P[board_info $dest avrdude,port]"
    } else {
        set avrdude_port ""
    }

    if {[board_info $dest exists avrdude,baud]} {
	set avrdude_baud "-b[board_info $dest avrdude,baud]"
    } else {
        set avrdude_baud ""
    }

    if {![is_remote host]} {
	if { [which $avrdude] == 0 } {
	    verbose -log "$avrdude missing." 3
	    return -1
	}
    }

    if {[board_info $dest exists avrdude,options]} {
	set avrdude_extra_flags [board_info $dest avrdude,options]
    } else {
        set avrdude_extra_flags ""
    }

    set avrdude_options "$avrdude_config $avrdude_programmer $avrdude_part \
                        $avrdude_port $avrdude_baud $avrdude_extra_flags"

    return [eval remote_spawn host \{ "$avrdude $avrdude_options -U flash:w:$cmdline" \} ]
}

proc avrdude_wait { dest timeout } {
    return [remote_wait host $timeout]
}

proc avrdude_load { dest prog args } {
    if {![file exists $prog]} then {
	perror "avrdude.exp: $prog to be downloaded does not exist."
	verbose -log "$prog to be downloaded does not exist." 3
	return [list "untested" ""]
    }

    if {[board_info $dest exists avrdude_time_limit]} {
	set avrdude_time_limit [board_info $dest avrdude_time_limit]
    } else {
	set avrdude_time_limit 240
    }

    # Launch energytool
    set energy_output ""
    set energytool_id [energytool_spawn $dest ]

    # Launch avrdude
    set avrdude_output ""
    set avrdude_cmd $prog
    set avrdude_id [remote_spawn target "${avrdude_cmd}"]
    if { $avrdude_id <= 0 } {
	return [list "fail" "remote_spawn failed"]
    }

    expect {
	-i $energytool_id -timeout $avrdude_time_limit -re "Energy:.+" {
            set energy_output $expect_out(buffer)
	}
	timeout {
	    warning "program timed out."
	}
	eof { }
    }

    set state [remote_wait target $avrdude_time_limit]
    set status [lindex $state 0]
    set output [lindex $state 1]
    verbose "Output is $output"

    verbose "Return status was: $status" 2
    if { $status == 0 } {
        if { $energy_output == "" } {
            set result "fail"
        } else {
            set result "pass"
            verbose -log "ENERGY for $prog: $energy_output"
            energytool_log $prog $energy_output
        }
    } else {
        set result "fail"
    }

    return [list $result $energy_output]
}

set_board_info protocol "avrdude"
